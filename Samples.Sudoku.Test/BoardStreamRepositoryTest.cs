namespace Samples.Sudoku.Test
{
    using Fakes;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.IO;
    using System.Threading.Tasks;

    /// <summary>
    /// Tests for <see cref="Samples.Sudoku.BoardStreamRepository"/>
    /// </summary>
    [TestClass]
	public class BoardStreamRepositoryTest
	{
		[TestMethod]
		[TestCategory("With fakes")]
		public async Task TestLoadBoard()
		{
			// A BoardStreamRepository needs an IStreamManager. Note that we use a
			// stub generated by Microsoft Fakes here.

			// Prepare
			var repository = BoardStreamRepositoryTest.SetupBoardStreamRepository(BoardSampleData.sampleBoard);

			// Execute
			var board = await repository.LoadAsync("DummyBoardName");

			// Assert
            CollectionAssert.AreEqual(BoardSampleData.sampleBoard, (byte[])board);
		}

		[TestMethod]
		[TestCategory("With fakes")]
        [ExpectedException(typeof(BoardException))]
		public async Task TestLoadBoardFailures()
		{
            // Prepare
			var repository = BoardStreamRepositoryTest.SetupBoardStreamRepository(new byte[] { 1, 2 });

            // Execute
			await repository.LoadAsync("DummyBoardName");
		}

		[TestMethod]
		[TestCategory("With fakes")]
		public async Task TestSaveBoard()
		{
            // Prepare
			var buffer = new byte[9 * 9];
			var repository = BoardStreamRepositoryTest.SetupBoardStreamRepository(buffer);

            // Execute
			await repository.SaveAsync("DummyBoardName", (Board)BoardSampleData.sampleBoard);

            // Assert
			CollectionAssert.AreEqual(BoardSampleData.sampleBoard, buffer);
		}

		private static BoardStreamRepository SetupBoardStreamRepository(byte[] buffer)
		{
			var stub = new StubIStreamManager();
			stub.OpenStreamAsyncStringAccessMode = (_, __) =>
				Task.FromResult(new MemoryStream(buffer) as Stream);
			return new BoardStreamRepository(stub);
		}
	}
}
